{"version":3,"sources":["logo.svg","Component/Title.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","this","props","title","description","href","url","target","React","Component","App","state","counter","setState","prevstate","className","src","logo","alt","onClick","increase","reduce","restart","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,qMCEtBC,G,6KAGjB,OACE,6BACE,4BAAKC,KAAKC,MAAMC,OAChB,4BAAKF,KAAKC,MAAME,aAChB,2BACE,oCADF,sFAGA,uBAAGC,KAAMJ,KAAKC,MAAMI,IAAKC,OAAO,UAAhC,c,GAV2BC,IAAMC,YCkE1BC,E,kDA5Db,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXC,QAAS,GAHM,E,uDAQjBX,KAAKY,UAAS,SAACC,GAEb,GAAGA,EAAUF,QAAS,GACpB,MAAM,CACJA,QAASE,EAAUF,QAAU,Q,+BAWnCX,KAAKY,UAAS,SAACC,GAEb,GAAGA,EAAUF,QAAS,EACpB,MAAM,CACJA,QAASE,EAAUF,QAAS,Q,gCAYlCX,KAAKY,SAAS,CACZD,QAASX,KAAKU,MAAMC,QAAU,M,+BAIxB,IAAD,OACP,OACE,yBAAKG,UAAU,OACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,EAAD,CAAOf,MAAM,eAAeC,YAAY,2BAA2BE,IAAI,wDACvE,wDACA,4BAAKL,KAAKU,MAAMC,SAChB,4BAAQO,QAAS,WAAQ,EAAKC,aAA9B,aACA,4BAAQD,QAAS,WAAQ,EAAKE,WAA9B,YACA,4BAAQF,QAAS,WAAQ,EAAKG,YAA9B,kB,GAvDUb,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.89535d2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.876a8325.svg\";","import React from 'react';\n\nexport default class Title extends React.Component{\n\n  render(){\n    return (\n      <div>\n        <h1>{this.props.title}</h1>\n        <h2>{this.props.description}</h2>\n        <p>\n          <b>React</b> é uma biblioteca JavaScript para construção de interfaces de usuário.\n        </p>\n        <a href={this.props.url} target=\"_blank\">REACT</a>\n\n      </div>\n    );\n\n  }\n}\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Title from './Component/Title';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0\n    }\n  }\n\n  increase() {\n    this.setState((prevstate)=>{\n\n      if(prevstate.counter <10) {\n        return{\n          counter: prevstate.counter + 1\n         }\n\n      }\n      \n    })\n\n  }\n   \n\n  reduce() {\n    this.setState((prevstate)=>{\n\n      if(prevstate.counter >0){\n        return{\n          counter: prevstate.counter -1\n         }\n\n      }\n      \n      \n    })\n\n  }\n\n\n  restart (){\n    this.setState({\n      counter: this.state.counter = 0\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Title title=\"Hello World!\" description=\"Aprendendo React em 2020\" url=\"https://pt-br.reactjs.org/docs/getting-started.html\" />\n        <h2>Click nas opcoes abaixo!</h2>\n        <h1>{this.state.counter}</h1>\n        <button onClick={() => { this.increase() }}>Aumentar </button> \n        <button onClick={() => { this.reduce() }}>Reduzir </button> \n        <button onClick={() => { this.restart() }}>Reiniciar</button>\n            \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}